// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/event.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace device {

class Controller;

extern "C" const fidl_type_t fuchsia_device_ControllerBindRequestTable;
extern "C" const fidl_type_t fuchsia_device_ControllerBindResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerUnbindResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerGetDriverNameResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerGetDeviceNameResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerGetTopologicalPathResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerGetEventHandleResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerSetDriverLogFlagsResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerDebugSuspendResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerDebugResumeResponseTable;
extern "C" const fidl_type_t fuchsia_device_ControllerRunCompatibilityTestsResponseTable;

// Interface for manipulating a device in a devhost
class Controller final {
 public:

  struct BindResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerBindResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct BindRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView driver;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerBindRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 1024;
    using ResponseType = BindResponse;
  };

  struct UnbindResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerUnbindResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using UnbindRequest = ::fidl::AnyZeroArgMessage;

  struct GetDriverNameResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::fidl::StringView name;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerGetDriverNameResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 32;
  };
  using GetDriverNameRequest = ::fidl::AnyZeroArgMessage;

  struct GetDeviceNameResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView name;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerGetDeviceNameResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 32;
  };
  using GetDeviceNameRequest = ::fidl::AnyZeroArgMessage;

  struct GetTopologicalPathResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::fidl::StringView path;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerGetTopologicalPathResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 1024;
  };
  using GetTopologicalPathRequest = ::fidl::AnyZeroArgMessage;

  struct GetEventHandleResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::zx::event event;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerGetEventHandleResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using GetEventHandleRequest = ::fidl::AnyZeroArgMessage;

  struct GetDriverLogFlagsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    uint32_t flags;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using GetDriverLogFlagsRequest = ::fidl::AnyZeroArgMessage;

  struct SetDriverLogFlagsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerSetDriverLogFlagsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct SetDriverLogFlagsRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t clear_flags;
    uint32_t set_flags;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = SetDriverLogFlagsResponse;
  };

  struct DebugSuspendResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerDebugSuspendResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using DebugSuspendRequest = ::fidl::AnyZeroArgMessage;

  struct DebugResumeResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerDebugResumeResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using DebugResumeRequest = ::fidl::AnyZeroArgMessage;

  struct RunCompatibilityTestsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_device_ControllerRunCompatibilityTestsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct RunCompatibilityTestsRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t hook_wait_time;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = RunCompatibilityTestsResponse;
  };


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Attempt to bind the requested driver to this device
    zx_status_t Bind(::fidl::StringView driver, int32_t* out_status);

    // Attempt to bind the requested driver to this device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<BindResponse> Bind(::fidl::BytePart _request_buffer, ::fidl::StringView driver, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Attempt to bind the requested driver to this device
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<BindResponse> Bind(::fidl::DecodedMessage<BindRequest> params, ::fidl::BytePart response_buffer);

    // Disconnect this device and allow its parent to be bound again.
    zx_status_t Unbind(int32_t* out_status);

    // Disconnect this device and allow its parent to be bound again.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<UnbindResponse> Unbind(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Disconnect this device and allow its parent to be bound again.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<UnbindResponse> Unbind(::fidl::BytePart response_buffer);


    // Return the name of the driver managing this the device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetDriverNameResponse> GetDriverName(::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_name);

    // Return the name of the driver managing this the device
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetDriverNameResponse> GetDriverName(::fidl::BytePart response_buffer);


    // Return the name of the device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetDeviceNameResponse> GetDeviceName(::fidl::BytePart _response_buffer, ::fidl::StringView* out_name);

    // Return the name of the device
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetDeviceNameResponse> GetDeviceName(::fidl::BytePart response_buffer);


    // Return the topological path for this device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetTopologicalPathResponse> GetTopologicalPath(::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_path);

    // Return the topological path for this device
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetTopologicalPathResponse> GetTopologicalPath(::fidl::BytePart response_buffer);

    // Get an event for monitoring device conditions (see DEVICE_SIGNAL_* constants)
    zx_status_t GetEventHandle(int32_t* out_status, ::zx::event* out_event);

    // Get an event for monitoring device conditions (see DEVICE_SIGNAL_* constants)
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetEventHandleResponse> GetEventHandle(::fidl::BytePart _response_buffer, int32_t* out_status, ::zx::event* out_event);

    // Get an event for monitoring device conditions (see DEVICE_SIGNAL_* constants)
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetEventHandleResponse> GetEventHandle(::fidl::BytePart response_buffer);

    // Return the current logging flags for this device's driver
    zx_status_t GetDriverLogFlags(int32_t* out_status, uint32_t* out_flags);

    // Return the current logging flags for this device's driver
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetDriverLogFlagsResponse> GetDriverLogFlags(::fidl::BytePart _response_buffer, int32_t* out_status, uint32_t* out_flags);

    // Return the current logging flags for this device's driver
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetDriverLogFlagsResponse> GetDriverLogFlags(::fidl::BytePart response_buffer);

    // Set the logging flags for this device's driver.
    // Each set bit in `clear_flags` will be cleared in the log flags state.
    // Each set bit in `set_flags` will then be set in the log flags state.
    zx_status_t SetDriverLogFlags(uint32_t clear_flags, uint32_t set_flags, int32_t* out_status);

    // Set the logging flags for this device's driver.
    // Each set bit in `clear_flags` will be cleared in the log flags state.
    // Each set bit in `set_flags` will then be set in the log flags state.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<SetDriverLogFlagsResponse> SetDriverLogFlags(::fidl::BytePart _request_buffer, uint32_t clear_flags, uint32_t set_flags, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Set the logging flags for this device's driver.
    // Each set bit in `clear_flags` will be cleared in the log flags state.
    // Each set bit in `set_flags` will then be set in the log flags state.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<SetDriverLogFlagsResponse> SetDriverLogFlags(::fidl::DecodedMessage<SetDriverLogFlagsRequest> params, ::fidl::BytePart response_buffer);

    // Debug command: execute the device's suspend hook
    zx_status_t DebugSuspend(int32_t* out_status);

    // Debug command: execute the device's suspend hook
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<DebugSuspendResponse> DebugSuspend(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Debug command: execute the device's suspend hook
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<DebugSuspendResponse> DebugSuspend(::fidl::BytePart response_buffer);

    // Debug command: execute the device's resume hook
    zx_status_t DebugResume(int32_t* out_status);

    // Debug command: execute the device's resume hook
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<DebugResumeResponse> DebugResume(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Debug command: execute the device's resume hook
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<DebugResumeResponse> DebugResume(::fidl::BytePart response_buffer);

    // RunCompatibilityTests: Runs compatibility tests for the driver that binds to this device.
    // The |hook_wait_time| is the time that the driver expects to take for each device hook in
    // nanoseconds.
    // Returns whether the driver passed the compatibility check.
    zx_status_t RunCompatibilityTests(int64_t hook_wait_time, uint32_t* out_status);

    // RunCompatibilityTests: Runs compatibility tests for the driver that binds to this device.
    // The |hook_wait_time| is the time that the driver expects to take for each device hook in
    // nanoseconds.
    // Returns whether the driver passed the compatibility check.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<RunCompatibilityTestsResponse> RunCompatibilityTests(::fidl::BytePart _request_buffer, int64_t hook_wait_time, ::fidl::BytePart _response_buffer, uint32_t* out_status);

    // RunCompatibilityTests: Runs compatibility tests for the driver that binds to this device.
    // The |hook_wait_time| is the time that the driver expects to take for each device hook in
    // nanoseconds.
    // Returns whether the driver passed the compatibility check.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<RunCompatibilityTestsResponse> RunCompatibilityTests(::fidl::DecodedMessage<RunCompatibilityTestsRequest> params, ::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    // Attempt to bind the requested driver to this device
    static zx_status_t Bind(zx::unowned_channel _client_end, ::fidl::StringView driver, int32_t* out_status);

    // Attempt to bind the requested driver to this device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<BindResponse> Bind(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView driver, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Attempt to bind the requested driver to this device
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<BindResponse> Bind(zx::unowned_channel _client_end, ::fidl::DecodedMessage<BindRequest> params, ::fidl::BytePart response_buffer);

    // Disconnect this device and allow its parent to be bound again.
    static zx_status_t Unbind(zx::unowned_channel _client_end, int32_t* out_status);

    // Disconnect this device and allow its parent to be bound again.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<UnbindResponse> Unbind(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Disconnect this device and allow its parent to be bound again.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<UnbindResponse> Unbind(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Return the name of the driver managing this the device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetDriverNameResponse> GetDriverName(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_name);

    // Return the name of the driver managing this the device
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetDriverNameResponse> GetDriverName(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Return the name of the device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetDeviceNameResponse> GetDeviceName(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ::fidl::StringView* out_name);

    // Return the name of the device
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetDeviceNameResponse> GetDeviceName(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Return the topological path for this device
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetTopologicalPathResponse> GetTopologicalPath(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_path);

    // Return the topological path for this device
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetTopologicalPathResponse> GetTopologicalPath(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Get an event for monitoring device conditions (see DEVICE_SIGNAL_* constants)
    static zx_status_t GetEventHandle(zx::unowned_channel _client_end, int32_t* out_status, ::zx::event* out_event);

    // Get an event for monitoring device conditions (see DEVICE_SIGNAL_* constants)
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetEventHandleResponse> GetEventHandle(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::zx::event* out_event);

    // Get an event for monitoring device conditions (see DEVICE_SIGNAL_* constants)
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetEventHandleResponse> GetEventHandle(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Return the current logging flags for this device's driver
    static zx_status_t GetDriverLogFlags(zx::unowned_channel _client_end, int32_t* out_status, uint32_t* out_flags);

    // Return the current logging flags for this device's driver
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetDriverLogFlagsResponse> GetDriverLogFlags(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, uint32_t* out_flags);

    // Return the current logging flags for this device's driver
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetDriverLogFlagsResponse> GetDriverLogFlags(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Set the logging flags for this device's driver.
    // Each set bit in `clear_flags` will be cleared in the log flags state.
    // Each set bit in `set_flags` will then be set in the log flags state.
    static zx_status_t SetDriverLogFlags(zx::unowned_channel _client_end, uint32_t clear_flags, uint32_t set_flags, int32_t* out_status);

    // Set the logging flags for this device's driver.
    // Each set bit in `clear_flags` will be cleared in the log flags state.
    // Each set bit in `set_flags` will then be set in the log flags state.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<SetDriverLogFlagsResponse> SetDriverLogFlags(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t clear_flags, uint32_t set_flags, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Set the logging flags for this device's driver.
    // Each set bit in `clear_flags` will be cleared in the log flags state.
    // Each set bit in `set_flags` will then be set in the log flags state.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<SetDriverLogFlagsResponse> SetDriverLogFlags(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetDriverLogFlagsRequest> params, ::fidl::BytePart response_buffer);

    // Debug command: execute the device's suspend hook
    static zx_status_t DebugSuspend(zx::unowned_channel _client_end, int32_t* out_status);

    // Debug command: execute the device's suspend hook
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<DebugSuspendResponse> DebugSuspend(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Debug command: execute the device's suspend hook
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<DebugSuspendResponse> DebugSuspend(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Debug command: execute the device's resume hook
    static zx_status_t DebugResume(zx::unowned_channel _client_end, int32_t* out_status);

    // Debug command: execute the device's resume hook
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<DebugResumeResponse> DebugResume(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Debug command: execute the device's resume hook
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<DebugResumeResponse> DebugResume(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // RunCompatibilityTests: Runs compatibility tests for the driver that binds to this device.
    // The |hook_wait_time| is the time that the driver expects to take for each device hook in
    // nanoseconds.
    // Returns whether the driver passed the compatibility check.
    static zx_status_t RunCompatibilityTests(zx::unowned_channel _client_end, int64_t hook_wait_time, uint32_t* out_status);

    // RunCompatibilityTests: Runs compatibility tests for the driver that binds to this device.
    // The |hook_wait_time| is the time that the driver expects to take for each device hook in
    // nanoseconds.
    // Returns whether the driver passed the compatibility check.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<RunCompatibilityTestsResponse> RunCompatibilityTests(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, int64_t hook_wait_time, ::fidl::BytePart _response_buffer, uint32_t* out_status);

    // RunCompatibilityTests: Runs compatibility tests for the driver that binds to this device.
    // The |hook_wait_time| is the time that the driver expects to take for each device hook in
    // nanoseconds.
    // Returns whether the driver passed the compatibility check.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<RunCompatibilityTestsResponse> RunCompatibilityTests(zx::unowned_channel _client_end, ::fidl::DecodedMessage<RunCompatibilityTestsRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Controller;
    using _Base = ::fidl::CompleterBase;

    class BindCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<BindResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using BindCompleter = ::fidl::Completer<BindCompleterBase>;

    virtual void Bind(::fidl::StringView driver, BindCompleter::Sync _completer) = 0;

    class UnbindCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<UnbindResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using UnbindCompleter = ::fidl::Completer<UnbindCompleterBase>;

    virtual void Unbind(UnbindCompleter::Sync _completer) = 0;

    class GetDriverNameCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::fidl::StringView name);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::StringView name);
      void Reply(::fidl::DecodedMessage<GetDriverNameResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetDriverNameCompleter = ::fidl::Completer<GetDriverNameCompleterBase>;

    virtual void GetDriverName(GetDriverNameCompleter::Sync _completer) = 0;

    class GetDeviceNameCompleterBase : public _Base {
     public:
      void Reply(::fidl::StringView name);
      void Reply(::fidl::BytePart _buffer, ::fidl::StringView name);
      void Reply(::fidl::DecodedMessage<GetDeviceNameResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetDeviceNameCompleter = ::fidl::Completer<GetDeviceNameCompleterBase>;

    virtual void GetDeviceName(GetDeviceNameCompleter::Sync _completer) = 0;

    class GetTopologicalPathCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::fidl::StringView path);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::StringView path);
      void Reply(::fidl::DecodedMessage<GetTopologicalPathResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetTopologicalPathCompleter = ::fidl::Completer<GetTopologicalPathCompleterBase>;

    virtual void GetTopologicalPath(GetTopologicalPathCompleter::Sync _completer) = 0;

    class GetEventHandleCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::zx::event event);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::zx::event event);
      void Reply(::fidl::DecodedMessage<GetEventHandleResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetEventHandleCompleter = ::fidl::Completer<GetEventHandleCompleterBase>;

    virtual void GetEventHandle(GetEventHandleCompleter::Sync _completer) = 0;

    class GetDriverLogFlagsCompleterBase : public _Base {
     public:
      void Reply(int32_t status, uint32_t flags);
      void Reply(::fidl::BytePart _buffer, int32_t status, uint32_t flags);
      void Reply(::fidl::DecodedMessage<GetDriverLogFlagsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetDriverLogFlagsCompleter = ::fidl::Completer<GetDriverLogFlagsCompleterBase>;

    virtual void GetDriverLogFlags(GetDriverLogFlagsCompleter::Sync _completer) = 0;

    class SetDriverLogFlagsCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetDriverLogFlagsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetDriverLogFlagsCompleter = ::fidl::Completer<SetDriverLogFlagsCompleterBase>;

    virtual void SetDriverLogFlags(uint32_t clear_flags, uint32_t set_flags, SetDriverLogFlagsCompleter::Sync _completer) = 0;

    class DebugSuspendCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<DebugSuspendResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using DebugSuspendCompleter = ::fidl::Completer<DebugSuspendCompleterBase>;

    virtual void DebugSuspend(DebugSuspendCompleter::Sync _completer) = 0;

    class DebugResumeCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<DebugResumeResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using DebugResumeCompleter = ::fidl::Completer<DebugResumeCompleterBase>;

    virtual void DebugResume(DebugResumeCompleter::Sync _completer) = 0;

    class RunCompatibilityTestsCompleterBase : public _Base {
     public:
      void Reply(uint32_t status);
      void Reply(::fidl::BytePart _buffer, uint32_t status);
      void Reply(::fidl::DecodedMessage<RunCompatibilityTestsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using RunCompatibilityTestsCompleter = ::fidl::Completer<RunCompatibilityTestsCompleterBase>;

    virtual void RunCompatibilityTests(int64_t hook_wait_time, RunCompatibilityTestsCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

// Maximum length for a driver path
constexpr uint64_t MAX_DRIVER_PATH_LEN = 1024u;

// Maxmium length for a driver name
constexpr uint64_t MAX_DRIVER_NAME_LEN = 32u;

// Maximum length of a device path
constexpr uint64_t MAX_DEVICE_PATH_LEN = 1024u;

// Maxmium length for a device name
constexpr uint64_t MAX_DEVICE_NAME_LEN = 32u;

// Signal that will be active on a device event handle if the device's write() method
// will accept data.
constexpr uint32_t DEVICE_SIGNAL_WRITABLE = 67108864u;

// Signal that will be active on a device event handle if the device's read() method
// will return data.
constexpr uint32_t DEVICE_SIGNAL_READABLE = 16777216u;

// Signal that will be active on a device event handle if the device has some out-of-band
// mechanism that needs attention.
// This is primarily used by the PTY support.
constexpr uint32_t DEVICE_SIGNAL_OOB = 33554432u;

// Signal that will be active on a device event handle if the device has been disconnected.
// This is primarily used by the PTY support.
constexpr uint32_t DEVICE_SIGNAL_HANGUP = 268435456u;

// Signal that will be active on a device event handle if the device has encountered an error.
// This is primarily used by the PTY support.
constexpr uint32_t DEVICE_SIGNAL_ERROR = 134217728u;

}  // namespace device
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::BindRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::BindRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::BindRequest)
    == ::llcpp::fuchsia::device::Controller::BindRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::BindRequest, driver) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::BindResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::BindResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::BindResponse)
    == ::llcpp::fuchsia::device::Controller::BindResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::BindResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::UnbindResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::UnbindResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::UnbindResponse)
    == ::llcpp::fuchsia::device::Controller::UnbindResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::UnbindResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::GetDriverNameResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::GetDriverNameResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::GetDriverNameResponse)
    == ::llcpp::fuchsia::device::Controller::GetDriverNameResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetDriverNameResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetDriverNameResponse, name) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::GetDeviceNameResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::GetDeviceNameResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::GetDeviceNameResponse)
    == ::llcpp::fuchsia::device::Controller::GetDeviceNameResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetDeviceNameResponse, name) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::GetTopologicalPathResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::GetTopologicalPathResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::GetTopologicalPathResponse)
    == ::llcpp::fuchsia::device::Controller::GetTopologicalPathResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetTopologicalPathResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetTopologicalPathResponse, path) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::GetEventHandleResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::GetEventHandleResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::GetEventHandleResponse)
    == ::llcpp::fuchsia::device::Controller::GetEventHandleResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetEventHandleResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetEventHandleResponse, event) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::GetDriverLogFlagsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::GetDriverLogFlagsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::GetDriverLogFlagsResponse)
    == ::llcpp::fuchsia::device::Controller::GetDriverLogFlagsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetDriverLogFlagsResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::GetDriverLogFlagsResponse, flags) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::SetDriverLogFlagsRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::SetDriverLogFlagsRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::SetDriverLogFlagsRequest)
    == ::llcpp::fuchsia::device::Controller::SetDriverLogFlagsRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::SetDriverLogFlagsRequest, clear_flags) == 16);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::SetDriverLogFlagsRequest, set_flags) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::SetDriverLogFlagsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::SetDriverLogFlagsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::SetDriverLogFlagsResponse)
    == ::llcpp::fuchsia::device::Controller::SetDriverLogFlagsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::SetDriverLogFlagsResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::DebugSuspendResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::DebugSuspendResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::DebugSuspendResponse)
    == ::llcpp::fuchsia::device::Controller::DebugSuspendResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::DebugSuspendResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::DebugResumeResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::DebugResumeResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::DebugResumeResponse)
    == ::llcpp::fuchsia::device::Controller::DebugResumeResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::DebugResumeResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::RunCompatibilityTestsRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::RunCompatibilityTestsRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::RunCompatibilityTestsRequest)
    == ::llcpp::fuchsia::device::Controller::RunCompatibilityTestsRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::RunCompatibilityTestsRequest, hook_wait_time) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::device::Controller::RunCompatibilityTestsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::device::Controller::RunCompatibilityTestsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::device::Controller::RunCompatibilityTestsResponse)
    == ::llcpp::fuchsia::device::Controller::RunCompatibilityTestsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::device::Controller::RunCompatibilityTestsResponse, status) == 16);

}  // namespace fidl

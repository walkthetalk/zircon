// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/hardware/spi/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace spi {

namespace {

[[maybe_unused]]
constexpr uint64_t kDevice_Transmit_Ordinal = 1486684895lu << 32;
extern "C" const fidl_type_t fuchsia_hardware_spi_DeviceTransmitRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_spi_DeviceTransmitResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_Receive_Ordinal = 92613081lu << 32;
extern "C" const fidl_type_t fuchsia_hardware_spi_DeviceReceiveRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_spi_DeviceReceiveResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_Exchange_Ordinal = 331561294lu << 32;
extern "C" const fidl_type_t fuchsia_hardware_spi_DeviceExchangeRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_spi_DeviceExchangeResponseTable;

}  // namespace

zx_status_t Device::SyncClient::Transmit(::fidl::VectorView<uint8_t> data, int32_t* out_status) {
  return Device::Call::Transmit(zx::unowned_channel(this->channel_), std::move(data), out_status);
}

zx_status_t Device::Call::Transmit(zx::unowned_channel _client_end, ::fidl::VectorView<uint8_t> data, int32_t* out_status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<TransmitRequest>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  TransmitRequest _request = {};
  _request._hdr.ordinal = kDevice_Transmit_Ordinal;
  _request.data = std::move(data);
  auto _linearize_result = ::fidl::Linearize(&_request, ::fidl::BytePart(_write_bytes,
                                                                         _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  ::fidl::DecodedMessage<TransmitRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<TransmitResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<TransmitRequest, TransmitResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  return ZX_OK;
}

::fidl::DecodeResult<Device::TransmitResponse> Device::SyncClient::Transmit(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> data, ::fidl::BytePart _response_buffer, int32_t* out_status) {
  return Device::Call::Transmit(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(data), std::move(_response_buffer), out_status);
}

::fidl::DecodeResult<Device::TransmitResponse> Device::Call::Transmit(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> data, ::fidl::BytePart _response_buffer, int32_t* out_status) {
  if (_request_buffer.capacity() < TransmitRequest::PrimarySize) {
    return ::fidl::DecodeResult<TransmitResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  TransmitRequest _request = {};
  _request._hdr.ordinal = kDevice_Transmit_Ordinal;
  _request.data = std::move(data);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TransmitResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<TransmitRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TransmitResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<TransmitRequest, TransmitResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<TransmitResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  return _decode_result;
}

::fidl::DecodeResult<Device::TransmitResponse> Device::SyncClient::Transmit(::fidl::DecodedMessage<TransmitRequest> params, ::fidl::BytePart response_buffer) {
  return Device::Call::Transmit(zx::unowned_channel(this->channel_), std::move(params), std::move(response_buffer));
}

::fidl::DecodeResult<Device::TransmitResponse> Device::Call::Transmit(zx::unowned_channel _client_end, ::fidl::DecodedMessage<TransmitRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_Transmit_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::TransmitResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<Device::TransmitResponse>());
  }
  auto _call_result = ::fidl::Call<TransmitRequest, TransmitResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::TransmitResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<Device::TransmitResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


::fidl::DecodeResult<Device::ReceiveResponse> Device::SyncClient::Receive(::fidl::BytePart _request_buffer, uint32_t size, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::VectorView<uint8_t>* out_data) {
  return Device::Call::Receive(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(size), std::move(_response_buffer), out_status, out_data);
}

::fidl::DecodeResult<Device::ReceiveResponse> Device::Call::Receive(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t size, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::VectorView<uint8_t>* out_data) {
  if (_request_buffer.capacity() < ReceiveRequest::PrimarySize) {
    return ::fidl::DecodeResult<ReceiveResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<ReceiveRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_Receive_Ordinal;
  _request.size = std::move(size);
  _request_buffer.set_actual(sizeof(ReceiveRequest));
  ::fidl::DecodedMessage<ReceiveRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ReceiveResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<ReceiveRequest, ReceiveResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ReceiveResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  *out_data = std::move(_response.data);
  return _decode_result;
}

::fidl::DecodeResult<Device::ReceiveResponse> Device::SyncClient::Receive(::fidl::DecodedMessage<ReceiveRequest> params, ::fidl::BytePart response_buffer) {
  return Device::Call::Receive(zx::unowned_channel(this->channel_), std::move(params), std::move(response_buffer));
}

::fidl::DecodeResult<Device::ReceiveResponse> Device::Call::Receive(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ReceiveRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_Receive_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::ReceiveResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<Device::ReceiveResponse>());
  }
  auto _call_result = ::fidl::Call<ReceiveRequest, ReceiveResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::ReceiveResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<Device::ReceiveResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


::fidl::DecodeResult<Device::ExchangeResponse> Device::SyncClient::Exchange(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> txdata, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::VectorView<uint8_t>* out_rxdata) {
  return Device::Call::Exchange(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(txdata), std::move(_response_buffer), out_status, out_rxdata);
}

::fidl::DecodeResult<Device::ExchangeResponse> Device::Call::Exchange(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint8_t> txdata, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::VectorView<uint8_t>* out_rxdata) {
  if (_request_buffer.capacity() < ExchangeRequest::PrimarySize) {
    return ::fidl::DecodeResult<ExchangeResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  ExchangeRequest _request = {};
  _request._hdr.ordinal = kDevice_Exchange_Ordinal;
  _request.txdata = std::move(txdata);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ExchangeResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<ExchangeRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ExchangeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<ExchangeRequest, ExchangeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ExchangeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_status = std::move(_response.status);
  *out_rxdata = std::move(_response.rxdata);
  return _decode_result;
}

::fidl::DecodeResult<Device::ExchangeResponse> Device::SyncClient::Exchange(::fidl::DecodedMessage<ExchangeRequest> params, ::fidl::BytePart response_buffer) {
  return Device::Call::Exchange(zx::unowned_channel(this->channel_), std::move(params), std::move(response_buffer));
}

::fidl::DecodeResult<Device::ExchangeResponse> Device::Call::Exchange(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ExchangeRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_Exchange_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::ExchangeResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<Device::ExchangeResponse>());
  }
  auto _call_result = ::fidl::Call<ExchangeRequest, ExchangeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::ExchangeResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<Device::ExchangeResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Device::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kDevice_Transmit_Ordinal: {
      auto result = ::fidl::DecodeAs<TransmitRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Transmit(std::move(message->data),
        Interface::TransmitCompleter::Sync(txn));
      return true;
    }
    case kDevice_Receive_Ordinal: {
      auto result = ::fidl::DecodeAs<ReceiveRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Receive(std::move(message->size),
        Interface::ReceiveCompleter::Sync(txn));
      return true;
    }
    case kDevice_Exchange_Ordinal: {
      auto result = ::fidl::DecodeAs<ExchangeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Exchange(std::move(message->txdata),
        Interface::ExchangeCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Device::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Device::Interface::TransmitCompleterBase::Reply(int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<TransmitResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<TransmitResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_Transmit_Ordinal;
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(TransmitResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<TransmitResponse>(std::move(_response_bytes)));
}

void Device::Interface::TransmitCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status) {
  if (_buffer.capacity() < TransmitResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<TransmitResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_Transmit_Ordinal;
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(TransmitResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<TransmitResponse>(std::move(_buffer)));
}

void Device::Interface::TransmitCompleterBase::Reply(::fidl::DecodedMessage<TransmitResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_Transmit_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::ReceiveCompleterBase::Reply(int32_t status, ::fidl::VectorView<uint8_t> data) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ReceiveResponse>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  ReceiveResponse _response = {};
  _response._hdr.ordinal = kDevice_Receive_Ordinal;
  _response.status = std::move(status);
  _response.data = std::move(data);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::ReceiveCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::VectorView<uint8_t> data) {
  if (_buffer.capacity() < ReceiveResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  ReceiveResponse _response = {};
  _response._hdr.ordinal = kDevice_Receive_Ordinal;
  _response.status = std::move(status);
  _response.data = std::move(data);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::ReceiveCompleterBase::Reply(::fidl::DecodedMessage<ReceiveResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_Receive_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::ExchangeCompleterBase::Reply(int32_t status, ::fidl::VectorView<uint8_t> rxdata) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ExchangeResponse>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  ExchangeResponse _response = {};
  _response._hdr.ordinal = kDevice_Exchange_Ordinal;
  _response.status = std::move(status);
  _response.rxdata = std::move(rxdata);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::ExchangeCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::VectorView<uint8_t> rxdata) {
  if (_buffer.capacity() < ExchangeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  ExchangeResponse _response = {};
  _response._hdr.ordinal = kDevice_Exchange_Ordinal;
  _response.status = std::move(status);
  _response.rxdata = std::move(rxdata);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Device::Interface::ExchangeCompleterBase::Reply(::fidl::DecodedMessage<ExchangeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_Exchange_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace spi
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp

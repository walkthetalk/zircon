// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

#include <fuchsia/io/llcpp/fidl.h>
#include <fuchsia/mem/llcpp/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace paver {

struct ReadInfo;
struct ReadResult;
class PayloadStream;
enum class Configuration : uint32_t {
  A = 1u,
  B = 2u,
  RECOVERY = 3u,
};


struct Paver_QueryActiveConfiguration_Response;
struct Paver_QueryActiveConfiguration_Result;
enum class Asset : uint32_t {
  KERNEL = 1u,
  VERIFIED_BOOT_METADATA = 2u,
};


class Paver;



struct ReadInfo {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  // Offset into VMO where read data starts.
  uint64_t offset{};

  // Size of read data.
  uint64_t size{};
};

extern "C" const fidl_type_t fuchsia_paver_ReadResultTable;

struct ReadResult {
  enum class Tag : fidl_union_tag_t {
    kErr = 0,
    kEof = 1,
    kInfo = 2,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  ReadResult();
  ~ReadResult();

  ReadResult(ReadResult&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  ReadResult& operator=(ReadResult&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_err() const { return tag_ == Tag::kErr; }

  // Error encountered while reading data.
  int32_t& mutable_err();

  // Error encountered while reading data.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  // Error encountered while reading data.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  // Error encountered while reading data.
  int32_t const & err() const { return err_; }

  bool is_eof() const { return tag_ == Tag::kEof; }

  // End of file reached.
  bool& mutable_eof();

  // End of file reached.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, bool>::value && std::is_copy_assignable<T>::value>
  set_eof(const T& v) {
    mutable_eof() = v;
  }

  // End of file reached.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, bool>::value && std::is_move_assignable<T>::value>
  set_eof(T&& v) {
    mutable_eof() = std::move(v);
  }

  // End of file reached.
  bool const & eof() const { return eof_; }

  bool is_info() const { return tag_ == Tag::kInfo; }

  // Information about location of successfully read data within pre-registered VMO.
  ReadInfo& mutable_info();

  // Information about location of successfully read data within pre-registered VMO.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ReadInfo>::value && std::is_copy_assignable<T>::value>
  set_info(const T& v) {
    mutable_info() = v;
  }

  // Information about location of successfully read data within pre-registered VMO.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ReadInfo>::value && std::is_move_assignable<T>::value>
  set_info(T&& v) {
    mutable_info() = std::move(v);
  }

  // Information about location of successfully read data within pre-registered VMO.
  ReadInfo const & info() const { return info_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &fuchsia_paver_ReadResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(ReadResult&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    int32_t err_;
    bool eof_;
    ReadInfo info_;
  };
};

extern "C" const fidl_type_t fuchsia_paver_PayloadStreamRegisterVmoRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PayloadStreamRegisterVmoResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PayloadStreamReadDataResponseTable;

// Protocol for streaming the FVM payload.
class PayloadStream final {
 public:

  struct RegisterVmoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PayloadStreamRegisterVmoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct RegisterVmoRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo vmo;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PayloadStreamRegisterVmoRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = RegisterVmoResponse;
  };

  struct ReadDataResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ReadResult result;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PayloadStreamReadDataResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using ReadDataRequest = ::fidl::AnyZeroArgMessage;


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Registers a VMO to stream into.
    zx_status_t RegisterVmo(::zx::vmo vmo, int32_t* out_status);

    // Registers a VMO to stream into.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<RegisterVmoResponse> RegisterVmo(::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Registers a VMO to stream into.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<RegisterVmoResponse> RegisterVmo(::fidl::DecodedMessage<RegisterVmoRequest> params, ::fidl::BytePart response_buffer);

    // Reads data into the pre-registered vmo.
    zx_status_t ReadData(ReadResult* out_result);

    // Reads data into the pre-registered vmo.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ReadDataResponse> ReadData(::fidl::BytePart _response_buffer, ReadResult* out_result);

    // Reads data into the pre-registered vmo.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ReadDataResponse> ReadData(::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    // Registers a VMO to stream into.
    static zx_status_t RegisterVmo(zx::unowned_channel _client_end, ::zx::vmo vmo, int32_t* out_status);

    // Registers a VMO to stream into.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<RegisterVmoResponse> RegisterVmo(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Registers a VMO to stream into.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<RegisterVmoResponse> RegisterVmo(zx::unowned_channel _client_end, ::fidl::DecodedMessage<RegisterVmoRequest> params, ::fidl::BytePart response_buffer);

    // Reads data into the pre-registered vmo.
    static zx_status_t ReadData(zx::unowned_channel _client_end, ReadResult* out_result);

    // Reads data into the pre-registered vmo.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ReadDataResponse> ReadData(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, ReadResult* out_result);

    // Reads data into the pre-registered vmo.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ReadDataResponse> ReadData(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = PayloadStream;
    using _Base = ::fidl::CompleterBase;

    class RegisterVmoCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<RegisterVmoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using RegisterVmoCompleter = ::fidl::Completer<RegisterVmoCompleterBase>;

    virtual void RegisterVmo(::zx::vmo vmo, RegisterVmoCompleter::Sync _completer) = 0;

    class ReadDataCompleterBase : public _Base {
     public:
      void Reply(ReadResult result);
      void Reply(::fidl::BytePart _buffer, ReadResult result);
      void Reply(::fidl::DecodedMessage<ReadDataResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ReadDataCompleter = ::fidl::Completer<ReadDataCompleterBase>;

    virtual void ReadData(ReadDataCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};



struct Paver_QueryActiveConfiguration_Response {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  Configuration configuration{};
};

extern "C" const fidl_type_t fuchsia_paver_Paver_QueryActiveConfiguration_ResultTable;

struct Paver_QueryActiveConfiguration_Result {
  enum class Tag : fidl_union_tag_t {
    kResponse = 0,
    kErr = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Paver_QueryActiveConfiguration_Result();
  ~Paver_QueryActiveConfiguration_Result();

  Paver_QueryActiveConfiguration_Result(Paver_QueryActiveConfiguration_Result&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Paver_QueryActiveConfiguration_Result& operator=(Paver_QueryActiveConfiguration_Result&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_response() const { return tag_ == Tag::kResponse; }

  Paver_QueryActiveConfiguration_Response& mutable_response();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, Paver_QueryActiveConfiguration_Response>::value && std::is_copy_assignable<T>::value>
  set_response(const T& v) {
    mutable_response() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, Paver_QueryActiveConfiguration_Response>::value && std::is_move_assignable<T>::value>
  set_response(T&& v) {
    mutable_response() = std::move(v);
  }

  Paver_QueryActiveConfiguration_Response const & response() const { return response_; }

  bool is_err() const { return tag_ == Tag::kErr; }

  int32_t& mutable_err();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  int32_t const & err() const { return err_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &fuchsia_paver_Paver_QueryActiveConfiguration_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(Paver_QueryActiveConfiguration_Result&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    Paver_QueryActiveConfiguration_Response response_;
    int32_t err_;
  };
};

extern "C" const fidl_type_t fuchsia_paver_PaverSetActiveConfigurationRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverSetActiveConfigurationResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverMarkActiveConfigurationSuccessfulResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverForceRecoveryConfigurationResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteAssetRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteAssetResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteVolumesRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteVolumesResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteBootloaderRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteBootloaderResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteDataFileRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteDataFileResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWipeVolumesResponseTable;

// Protocol for managing boot partitions.
class Paver final {
 public:
  static constexpr char Name_[] = "fuchsia.paver.Paver";

  struct QueryActiveConfigurationResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    Paver_QueryActiveConfiguration_Result result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using QueryActiveConfigurationRequest = ::fidl::AnyZeroArgMessage;

  struct SetActiveConfigurationResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetActiveConfigurationResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct SetActiveConfigurationRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    Configuration configuration;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetActiveConfigurationRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = SetActiveConfigurationResponse;
  };

  struct MarkActiveConfigurationSuccessfulResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverMarkActiveConfigurationSuccessfulResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using MarkActiveConfigurationSuccessfulRequest = ::fidl::AnyZeroArgMessage;

  struct ForceRecoveryConfigurationResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverForceRecoveryConfigurationResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using ForceRecoveryConfigurationRequest = ::fidl::AnyZeroArgMessage;

  struct WriteAssetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteAssetResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct WriteAssetRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    Configuration configuration;
    Asset asset;
    ::llcpp::fuchsia::mem::Buffer payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteAssetRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = WriteAssetResponse;
  };

  struct WriteVolumesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteVolumesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct WriteVolumesRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteVolumesRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = WriteVolumesResponse;
  };

  struct WriteBootloaderResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteBootloaderResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct WriteBootloaderRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::mem::Buffer payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteBootloaderRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = WriteBootloaderResponse;
  };

  struct WriteDataFileResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteDataFileResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct WriteDataFileRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView filename;
    ::llcpp::fuchsia::mem::Buffer payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteDataFileRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 48;
    static constexpr uint32_t MaxOutOfLine = 4096;
    using ResponseType = WriteDataFileResponse;
  };

  struct WipeVolumesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWipeVolumesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using WipeVolumesRequest = ::fidl::AnyZeroArgMessage;


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Queries active configuration.
    zx_status_t QueryActiveConfiguration(Paver_QueryActiveConfiguration_Result* out_result);

    // Queries active configuration.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<QueryActiveConfigurationResponse> QueryActiveConfiguration(::fidl::BytePart _response_buffer, Paver_QueryActiveConfiguration_Result* out_result);

    // Queries active configuration.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<QueryActiveConfigurationResponse> QueryActiveConfiguration(::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    zx_status_t SetActiveConfiguration(Configuration configuration, int32_t* out_status);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<SetActiveConfigurationResponse> SetActiveConfiguration(::fidl::BytePart _request_buffer, Configuration configuration, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<SetActiveConfigurationResponse> SetActiveConfiguration(::fidl::DecodedMessage<SetActiveConfigurationRequest> params, ::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called.
    zx_status_t MarkActiveConfigurationSuccessful(int32_t* out_status);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<MarkActiveConfigurationSuccessfulResponse> MarkActiveConfigurationSuccessful(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MarkActiveConfigurationSuccessfulResponse> MarkActiveConfigurationSuccessful(::fidl::BytePart response_buffer);

    // Force the next reboot to boot into the recovery configuration. Does not persist between
    // subsequent boots.
    zx_status_t ForceRecoveryConfiguration(int32_t* out_status);

    // Force the next reboot to boot into the recovery configuration. Does not persist between
    // subsequent boots.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ForceRecoveryConfigurationResponse> ForceRecoveryConfiguration(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Force the next reboot to boot into the recovery configuration. Does not persist between
    // subsequent boots.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ForceRecoveryConfigurationResponse> ForceRecoveryConfiguration(::fidl::BytePart response_buffer);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // Will zero out rest of the partition if `payload` is smaller than the size of the partition
    // being written.
    //
    // Returns ZX_ERR_INVALID_ARGS if `configuration` specifies active configuration.
    zx_status_t WriteAsset(Configuration configuration, Asset asset, ::llcpp::fuchsia::mem::Buffer payload, int32_t* out_status);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // Will zero out rest of the partition if `payload` is smaller than the size of the partition
    // being written.
    //
    // Returns ZX_ERR_INVALID_ARGS if `configuration` specifies active configuration.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WriteAssetResponse> WriteAsset(::fidl::BytePart _request_buffer, Configuration configuration, Asset asset, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // Will zero out rest of the partition if `payload` is smaller than the size of the partition
    // being written.
    //
    // Returns ZX_ERR_INVALID_ARGS if `configuration` specifies active configuration.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<WriteAssetResponse> WriteAsset(::fidl::DecodedMessage<WriteAssetRequest> params, ::fidl::BytePart response_buffer);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    zx_status_t WriteVolumes(::zx::channel payload, int32_t* out_status);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WriteVolumesResponse> WriteVolumes(::fidl::BytePart _request_buffer, ::zx::channel payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<WriteVolumesResponse> WriteVolumes(::fidl::DecodedMessage<WriteVolumesRequest> params, ::fidl::BytePart response_buffer);

    // Writes bootloader partition with data from `payload`.
    zx_status_t WriteBootloader(::llcpp::fuchsia::mem::Buffer payload, int32_t* out_status);

    // Writes bootloader partition with data from `payload`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WriteBootloaderResponse> WriteBootloader(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes bootloader partition with data from `payload`.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<WriteBootloaderResponse> WriteBootloader(::fidl::DecodedMessage<WriteBootloaderRequest> params, ::fidl::BytePart response_buffer);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    zx_status_t WriteDataFile(::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, int32_t* out_status);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WriteDataFileResponse> WriteDataFile(::fidl::BytePart _request_buffer, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<WriteDataFileResponse> WriteDataFile(::fidl::DecodedMessage<WriteDataFileRequest> params, ::fidl::BytePart response_buffer);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    zx_status_t WipeVolumes(int32_t* out_status);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<WipeVolumesResponse> WipeVolumes(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<WipeVolumesResponse> WipeVolumes(::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    // Queries active configuration.
    static zx_status_t QueryActiveConfiguration(zx::unowned_channel _client_end, Paver_QueryActiveConfiguration_Result* out_result);

    // Queries active configuration.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<QueryActiveConfigurationResponse> QueryActiveConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, Paver_QueryActiveConfiguration_Result* out_result);

    // Queries active configuration.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<QueryActiveConfigurationResponse> QueryActiveConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    static zx_status_t SetActiveConfiguration(zx::unowned_channel _client_end, Configuration configuration, int32_t* out_status);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<SetActiveConfigurationResponse> SetActiveConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, Configuration configuration, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<SetActiveConfigurationResponse> SetActiveConfiguration(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetActiveConfigurationRequest> params, ::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called.
    static zx_status_t MarkActiveConfigurationSuccessful(zx::unowned_channel _client_end, int32_t* out_status);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<MarkActiveConfigurationSuccessfulResponse> MarkActiveConfigurationSuccessful(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<MarkActiveConfigurationSuccessfulResponse> MarkActiveConfigurationSuccessful(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Force the next reboot to boot into the recovery configuration. Does not persist between
    // subsequent boots.
    static zx_status_t ForceRecoveryConfiguration(zx::unowned_channel _client_end, int32_t* out_status);

    // Force the next reboot to boot into the recovery configuration. Does not persist between
    // subsequent boots.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ForceRecoveryConfigurationResponse> ForceRecoveryConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Force the next reboot to boot into the recovery configuration. Does not persist between
    // subsequent boots.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ForceRecoveryConfigurationResponse> ForceRecoveryConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // Will zero out rest of the partition if `payload` is smaller than the size of the partition
    // being written.
    //
    // Returns ZX_ERR_INVALID_ARGS if `configuration` specifies active configuration.
    static zx_status_t WriteAsset(zx::unowned_channel _client_end, Configuration configuration, Asset asset, ::llcpp::fuchsia::mem::Buffer payload, int32_t* out_status);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // Will zero out rest of the partition if `payload` is smaller than the size of the partition
    // being written.
    //
    // Returns ZX_ERR_INVALID_ARGS if `configuration` specifies active configuration.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WriteAssetResponse> WriteAsset(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, Configuration configuration, Asset asset, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // Will zero out rest of the partition if `payload` is smaller than the size of the partition
    // being written.
    //
    // Returns ZX_ERR_INVALID_ARGS if `configuration` specifies active configuration.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<WriteAssetResponse> WriteAsset(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteAssetRequest> params, ::fidl::BytePart response_buffer);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    static zx_status_t WriteVolumes(zx::unowned_channel _client_end, ::zx::channel payload, int32_t* out_status);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WriteVolumesResponse> WriteVolumes(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<WriteVolumesResponse> WriteVolumes(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteVolumesRequest> params, ::fidl::BytePart response_buffer);

    // Writes bootloader partition with data from `payload`.
    static zx_status_t WriteBootloader(zx::unowned_channel _client_end, ::llcpp::fuchsia::mem::Buffer payload, int32_t* out_status);

    // Writes bootloader partition with data from `payload`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WriteBootloaderResponse> WriteBootloader(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes bootloader partition with data from `payload`.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<WriteBootloaderResponse> WriteBootloader(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteBootloaderRequest> params, ::fidl::BytePart response_buffer);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    static zx_status_t WriteDataFile(zx::unowned_channel _client_end, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, int32_t* out_status);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WriteDataFileResponse> WriteDataFile(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<WriteDataFileResponse> WriteDataFile(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteDataFileRequest> params, ::fidl::BytePart response_buffer);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    static zx_status_t WipeVolumes(zx::unowned_channel _client_end, int32_t* out_status);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<WipeVolumesResponse> WipeVolumes(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<WipeVolumesResponse> WipeVolumes(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Paver;
    using _Base = ::fidl::CompleterBase;

    class QueryActiveConfigurationCompleterBase : public _Base {
     public:
      void Reply(Paver_QueryActiveConfiguration_Result result);
      void Reply(::fidl::BytePart _buffer, Paver_QueryActiveConfiguration_Result result);
      void Reply(::fidl::DecodedMessage<QueryActiveConfigurationResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using QueryActiveConfigurationCompleter = ::fidl::Completer<QueryActiveConfigurationCompleterBase>;

    virtual void QueryActiveConfiguration(QueryActiveConfigurationCompleter::Sync _completer) = 0;

    class SetActiveConfigurationCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetActiveConfigurationResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetActiveConfigurationCompleter = ::fidl::Completer<SetActiveConfigurationCompleterBase>;

    virtual void SetActiveConfiguration(Configuration configuration, SetActiveConfigurationCompleter::Sync _completer) = 0;

    class MarkActiveConfigurationSuccessfulCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<MarkActiveConfigurationSuccessfulResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MarkActiveConfigurationSuccessfulCompleter = ::fidl::Completer<MarkActiveConfigurationSuccessfulCompleterBase>;

    virtual void MarkActiveConfigurationSuccessful(MarkActiveConfigurationSuccessfulCompleter::Sync _completer) = 0;

    class ForceRecoveryConfigurationCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<ForceRecoveryConfigurationResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ForceRecoveryConfigurationCompleter = ::fidl::Completer<ForceRecoveryConfigurationCompleterBase>;

    virtual void ForceRecoveryConfiguration(ForceRecoveryConfigurationCompleter::Sync _completer) = 0;

    class WriteAssetCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteAssetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteAssetCompleter = ::fidl::Completer<WriteAssetCompleterBase>;

    virtual void WriteAsset(Configuration configuration, Asset asset, ::llcpp::fuchsia::mem::Buffer payload, WriteAssetCompleter::Sync _completer) = 0;

    class WriteVolumesCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteVolumesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteVolumesCompleter = ::fidl::Completer<WriteVolumesCompleterBase>;

    virtual void WriteVolumes(::zx::channel payload, WriteVolumesCompleter::Sync _completer) = 0;

    class WriteBootloaderCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteBootloaderResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteBootloaderCompleter = ::fidl::Completer<WriteBootloaderCompleterBase>;

    virtual void WriteBootloader(::llcpp::fuchsia::mem::Buffer payload, WriteBootloaderCompleter::Sync _completer) = 0;

    class WriteDataFileCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteDataFileResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteDataFileCompleter = ::fidl::Completer<WriteDataFileCompleterBase>;

    virtual void WriteDataFile(::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, WriteDataFileCompleter::Sync _completer) = 0;

    class WipeVolumesCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WipeVolumesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WipeVolumesCompleter = ::fidl::Completer<WipeVolumesCompleterBase>;

    virtual void WipeVolumes(WipeVolumesCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace paver
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::paver::ReadInfo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::ReadInfo>);
static_assert(offsetof(::llcpp::fuchsia::paver::ReadInfo, offset) == 0);
static_assert(offsetof(::llcpp::fuchsia::paver::ReadInfo, size) == 8);
static_assert(sizeof(::llcpp::fuchsia::paver::ReadInfo) == ::llcpp::fuchsia::paver::ReadInfo::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::ReadResult> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::ReadResult>);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest)
    == ::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest, vmo) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse)
    == ::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse)
    == ::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response>);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response, configuration) == 0);
static_assert(sizeof(::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response) == ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result>);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse)
    == ::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetActiveConfigurationRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetActiveConfigurationRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetActiveConfigurationRequest)
    == ::llcpp::fuchsia::paver::Paver::SetActiveConfigurationRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetActiveConfigurationRequest, configuration) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetActiveConfigurationResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetActiveConfigurationResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetActiveConfigurationResponse)
    == ::llcpp::fuchsia::paver::Paver::SetActiveConfigurationResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetActiveConfigurationResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::MarkActiveConfigurationSuccessfulResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::MarkActiveConfigurationSuccessfulResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::MarkActiveConfigurationSuccessfulResponse)
    == ::llcpp::fuchsia::paver::Paver::MarkActiveConfigurationSuccessfulResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::MarkActiveConfigurationSuccessfulResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::ForceRecoveryConfigurationResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::ForceRecoveryConfigurationResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::ForceRecoveryConfigurationResponse)
    == ::llcpp::fuchsia::paver::Paver::ForceRecoveryConfigurationResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::ForceRecoveryConfigurationResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteAssetRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteAssetRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteAssetRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest, configuration) == 16);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest, asset) == 20);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest, payload) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteAssetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteAssetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteAssetResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteAssetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteVolumesRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteVolumesRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteVolumesRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteVolumesRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteVolumesRequest, payload) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteVolumesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteVolumesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteVolumesResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteVolumesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteVolumesResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest, payload) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteDataFileRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteDataFileRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteDataFileRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteDataFileRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteDataFileRequest, filename) == 16);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteDataFileRequest, payload) == 32);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteDataFileResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteDataFileResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteDataFileResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteDataFileResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteDataFileResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WipeVolumesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WipeVolumesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WipeVolumesResponse)
    == ::llcpp::fuchsia::paver::Paver::WipeVolumesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WipeVolumesResponse, status) == 16);

}  // namespace fidl
